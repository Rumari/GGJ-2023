require "modules.constants"

go.property("health", 100)
go.property("controller", msg.url())
go.property("player", msg.url())
go.property("move_speed", 3)
go.property("bounds_min", vmath.vector3(-5, 0, -5))
go.property("bounds_max", vmath.vector3(5, 0, 0))

local function clamp_to_bounds(pos, bounds)
	if pos.x < bounds.min.x then
		pos.x = bounds.min.x
	elseif pos.x > bounds.max.x then
		pos.x = bounds.max.x
	end

	if pos.z < bounds.min.z then
		pos.z = bounds.min.z
	elseif pos.z > bounds.max.z then
		pos.z = bounds.max.z
	end
end

local function move(self, speed, dir, facing, dt)
	-- moves the enemy in the given direction, facing towards another direction.
	local pos = go.get_position() + dir * speed * dt

	-- make sure it stays inside the bounds
	clamp_to_bounds(pos, { min = self.bounds_min, max = self.bounds_max })
	go.set_position(pos)
end

local function to_plane(pos3d)
	-- utility to project coordinates into xz plane
	return vmath.vector3(pos3d.x, 0.0, pos3d.z)
end
	
function init(self)
	self.stance = ENEMY_DISTANCE
	self.random_dir = nil
	self.random_time = 0.0
end

function update(self, dt)
	self.random_time = self.random_time + dt
	
	if self.stance == ENEMY_DISTANCE then
		local player_pos = to_plane(go.get_position(self.player))
		local pos = to_plane(go.get_position())
		local offset = player_pos - pos
		local distance = vmath.length(offset)
		local player_dir = offset / distance

		if distance < ENEMY_ATTACK_RANGE then
			msg.post(self.controller, "can_attack")
		elseif distance < ENEMY_DISTANCE_RANGE then
			-- flee to safe distance
			move(self, self.move_speed, -player_dir, player_dir, dt)
			self.random_dir = nil -- force wander to pick a new dir
		else
			if self.random_time > ENEMY_WANDER_DIR_TIME or self.random_dir == nil then
				self.random_time = 0.0
				self.random_dir = vmath.vector3(math.random(-1, 1), 0, math.random(-1, 1))
			end

			move(self, self.move_speed * ENEMY_WANDER_SPEED_MUL, self.random_dir, player_dir, dt)
		end
	elseif self.stance == ENEMY_FIGHT then
		-- todo: move within attack range
		-- todo: if within attack range, punch/defend on rhythm
	end
end

function on_message(self, message_id, message, sender)
	if message_id == PUNCH then
		-- todo: the enemy may block the punch
		-- todo: play dying animation first or smth
		-- todo: on low health switch to distance stance
		local damage = message
		self.health = self.health - damage
		if self.health <= 0 then
			msg.post(self.controller, "died")
			go.delete()
		end
	elseif message_id == hash("distance") then
		self.stance = DISTANCE
	elseif message_id == hash("fight") then
		self.stance = FIGHT
	end
end

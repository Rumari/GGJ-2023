-- higher values -> less pixelated
DESIRED_WIDTH = 480

local function create_render_targets(self, width, height)
    local scale = width / DESIRED_WIDTH
    
    local color_params = { format = render.FORMAT_RGBA,
        width = width / scale,
        height = height / scale,
        min_filter = render.FILTER_NEAREST,
        mag_filter = render.FILTER_NEAREST,
        u_wrap = render.WRAP_CLAMP_TO_EDGE,
        v_wrap = render.WRAP_CLAMP_TO_EDGE }

    local depth_params = { format = render.FORMAT_DEPTH,
        width = width / scale,
        height = height / scale,
        min_filter = render.FILTER_NEAREST,
        mag_filter = render.FILTER_NEAREST,
        u_wrap = render.WRAP_CLAMP_TO_EDGE,
        v_wrap = render.WRAP_CLAMP_TO_EDGE }

    self.small_render_target = render.render_target({
        [render.BUFFER_COLOR_BIT] = color_params,
        [render.BUFFER_DEPTH_BIT] = depth_params })
    self.small_width = width / scale
    self.small_height = height / scale
    self.width = width
    self.height = height
end

function init(self)
    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.particle_pred = render.predicate({"particle"})
    self.model_pred = render.predicate({"model"})

    self.pixels_pred = render.predicate({"effects-pixels"})
    
    self.clear_color = vmath.vector4(0, 0, 0, 0)
    self.clear_color.x = sys.get_config("render.clear_color_red", 0)
    self.clear_color.y = sys.get_config("render.clear_color_green", 0)
    self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
    self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

    self.view = vmath.matrix4()

    -- prepare pixelated render target
    create_render_targets(self, render.get_window_width(), render.get_window_height())
end

function update(self)
    -- if the window was resized, recreate the render targets
    --
    if self.width ~= render.get_window_width() or self.height ~= render.get_window_height() then
        create_render_targets(self, render.get_window_width(), render.get_window_height())
    end
    
    -- prepare for rendering on the small render target
    -- 
    render.set_render_target(self.small_render_target)
    render.set_depth_mask(true)
    render.set_stencil_mask(0xff)
    render.set_viewport(0, 0, self.small_width, self.small_height)

    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
    render.set_view(self.view)
    render.set_projection(self.projection or vmath.matrix4())

    -- render models
    --
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.enable_state(render.STATE_CULL_FACE)
    render.enable_state(render.STATE_DEPTH_TEST)
    render.set_depth_mask(true)
    render.draw(self.model_pred)
    render.set_depth_mask(false)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_CULL_FACE)

    -- render sprites, label, particles
    --
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.enable_state(render.STATE_DEPTH_TEST)
    render.enable_state(render.STATE_STENCIL_TEST)
    render.enable_state(render.STATE_BLEND)
    render.draw(self.tile_pred)
    render.draw(self.particle_pred)
    render.disable_state(render.STATE_STENCIL_TEST)
    render.disable_state(render.STATE_DEPTH_TEST)

    -- draw the screen quad on the window
    --
    render.set_render_target(render.RENDER_TARGET_DEFAULT)
    render.enable_texture(0, self.small_render_target, render.BUFFER_COLOR_BIT)
    render.set_view(vmath.matrix4())
    render.set_projection(vmath.matrix4())
    render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
    render.draw(self.pixels_pred)
    render.disable_texture(0)

    -- debug
    render.draw_debug3d()

    -- render GUI
    --
    render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))
    render.enable_state(render.STATE_STENCIL_TEST)
    render.draw(self.gui_pred)
    render.draw(self.text_pred)
    render.disable_state(render.STATE_BLEND)
    render.disable_state(render.STATE_STENCIL_TEST)
end

function on_message(self, message_id, message)
    if message_id == hash("clear_color") then
        self.clear_color = message.color
    elseif message_id == hash("set_view_projection") then
        self.view = message.view
        self.projection = message.projection
    end
end
